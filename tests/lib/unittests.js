// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  define(['upndown'], function(upndown) {
    var und;
    und = new upndown();
    module("UpnDown Tests");
    test("basics", function() {
      equal(und.convert(""), "");
      equal(und.convert("<h1>Heading 1</h1>"), "# Heading 1");
      equal(und.convert("<h2>Heading 2</h2>"), "## Heading 2");
      equal(und.convert("<h3>Heading 3</h3>"), "### Heading 3");
      equal(und.convert("<h4>Heading 4</h4>"), "#### Heading 4");
      equal(und.convert("<h5>Heading 5</h5>"), "##### Heading 5");
      equal(und.convert("<h6>Heading 6</h6>"), "###### Heading 6");
      equal(und.convert("<p>Paragraph.</p>"), "Paragraph.");
      equal(und.convert("<p><strong>Strong</strong> text.</p>"), "**Strong** text.");
      equal(und.convert("<p><b>Bold</b> text.</p>"), "**Bold** text.");
      equal(und.convert("<p><em>Emphasized</em> text.</p>"), "*Emphasized* text.");
      equal(und.convert("<p><code>Coded</code> text.</p>"), "`Coded` text.");
      equal(und.convert("<pre>Pre-formatted text.</pre>"), "    Pre-formatted text.");
      equal(und.convert("<blockquote><p>Blockquoted text.</p></blockquote>"), "> Blockquoted text.");
      equal(und.convert("<ul><li>One</li><li>Two</li></ul>"), "*   One\n*   Two");
      equal(und.convert("<ol><li>One</li><li>Two</li></ol>"), "1.  One\n2.  Two");
      equal(und.convert("<img src=\"http://netgusto.com/img/logo-netgusto.com\" alt=\"Net Gusto\" />"), "![Net Gusto](http://netgusto.com/img/logo-netgusto.com)");
      equal(und.convert("<a href=\"http://netgusto.com/\">Net Gusto</a>"), "[Net Gusto](http://netgusto.com/)");
      equal(und.convert("<hr />"), "* * *");
      equal(und.convert("<div>Hello</div>"), "<div>Hello</div>");
      return equal(und.convert('<p>First line of text.</p>\n<h1>Heading 1</h1>\n<ul>\n    <li>List item 1.</li>\n    <li>List item 2.</li>\n    <li>List item 3.</li>\n</ul>\n<p>Second line of text.</p>\n<h2>Heading 2</h2>\n<blockquote>blockquoted text</blockquote>\n<ul>\n    <li>List item 1.</li>\n</ul>'), 'First line of text.\n\n# Heading 1\n\n*   List item 1.\n*   List item 2.\n*   List item 3.\n\nSecond line of text.\n\n## Heading 2\n\n> blockquoted text\n\n*   List item 1.');
    });
    test("heading", function() {
      equal(und.convert("<h1>Heading 1\nWith a newline</h1>"), "# Heading 1 With a newline");
      equal(und.convert("<h2>Heading 2\nWith a newline and   several  \n\t  whitespaces</h2>"), "## Heading 2 With a newline and several whitespaces");
      equal(und.convert("<h1>A header with <em>italics</em> in it</h1>"), "# A header with *italics* in it");
      return equal(und.convert("<h1>A header with a <a href=\"http://netgusto.com/\">link</a> in it.</h1>"), "# A header with a [link](http://netgusto.com/) in it.");
    });
    test("paragraph", function() {
      equal(und.convert("Line two."), "Line two.");
      equal(und.convert("<p>Line two.</p>"), "Line two.");
      equal(und.convert("<p>Line one.</p><p>Line two.</p>"), "Line one.\n\nLine two.");
      equal(und.convert("<p>Line one.</p>\n\n\n<p>Line two.</p>"), "Line one.\n\nLine two.");
      equal(und.convert("<p>Line\none.</p><p>Line\ntwo.</p>"), "Line one.\n\nLine two.");
      return equal(und.convert("    <p>Line one.</p> <p>Line two.</p>      "), "Line one.\n\nLine two.");
    });
    test("code", function() {
      equal(und.convert("<code></code>"), "``");
      equal(und.convert("<code>Line one.</code>"), "`Line one.`");
      equal(und.convert("<p><code>Line one.</code></p>"), "`Line one.`");
      equal(und.convert("<p><code>Line one.      Line two.</code></p>"), "`Line one.      Line two.`");
      equal(und.convert("<p><code>Line one.  \n    Line two.</code></p>"), "`Line one.  \n    Line two.`");
      equal(und.convert("<strong><code>Line one.  \n    Line two.</code></strong>"), "**`Line one.  \n    Line two.`**");
      equal(und.convert('<p>This is a normal paragraph:</p>\n\n<pre><code>This is a code block.\n</code></pre>'), 'This is a normal paragraph:\n\n    This is a code block.');
      equal(und.convert('<p>Here is an example of AppleScript:</p>\n\n<pre><code>tell application "Foo"\n    beep\nend tell\n</code></pre>'), 'Here is an example of AppleScript:\n\n    tell application "Foo"\n        beep\n    end tell');
      equal(und.convert('<pre><code>&lt;div class="footer"&gt;\n    &amp;copy; 2014 Foo Corporation\n&lt;/div&gt;\n</code></pre>'), '    <div class="footer">\n        &copy; 2014 Foo Corporation\n    </div>');
      equal(und.convert('<pre><code>A code block with *asterisks*.\nAnd _underlines_.\n</code></pre>'), '    A code block with *asterisks*.\n    And _underlines_.');
      equal(und.convert('<p>Use the <code>printf()</code> function.</p>'), 'Use the `printf()` function.');
      equal(und.convert('<p>Please don\'t use any <code>&lt;blink&gt;</code> tags.</p>'), 'Please don\'t use any `<blink>` tags.');
      equal(und.convert('<p><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.</p>'), '`&#8212;` is the decimal-encoded equivalent of `&mdash;`.');
      return equal(und.convert('<p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an</p>'), 'Markdown treats asterisks (`*`) and underscores (`_`) as indicators of emphasis. Text wrapped with one `*` or `_` will be wrapped with an');
    });
    test("pre", function() {
      equal(und.convert("<pre>Pre();</pre><p>Hello</p>"), "    Pre();\n\nHello");
      equal(und.convert("<pre><code>Pre();</code></pre><p>Hello</p>"), "    Pre();\n\nHello");
      equal(und.convert("<pre>Line one.\nLine two.</pre>"), "    Line one.\n    Line two.");
      return equal(und.convert('<ul>\n    <li>One.</li>\n    <li>Two.<pre>\n$ Pre line 1\n\n$ Pre line 2</pre></li>\n</ul>'), '*   One.\n*   Two.\n\n\n        $ Pre line 1\n\n        $ Pre line 2');
    });
    test("blockquote", function() {
      equal(und.convert("<blockquote><p>Line one.</p><p>Line two.</p></blockquote>"), "> Line one.\n> \n> Line two.");
      equal(und.convert('<blockquote>\n    <p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,\n    consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n\n    <p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse\n    id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>'), '> This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.\n> \n> Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.');
      equal(und.convert('<p>Hello, World !</p>\n\n<blockquote>\n    <p>One</p>\n    \n    <blockquote>\n        <p>Two</p>\n    </blockquote>\n    \n    <p>Three</p>\n</blockquote>'), 'Hello, World !\n\n> One\n> \n> > Two\n> \n> Three');
      return equal(und.convert('        \n<blockquote>\n    <h2>This is a header.</h2>\n    \n    <ol>\n        <li>This is the first list item.</li>\n        <li>This is the second list item.</li>\n    </ol>\n    \n    <p>Here\'s some example code:</p>\n    \n<pre><code>return shell_exec("echo $input | $markdown_script");</code></pre>\n</blockquote>'), '> ## This is a header.\n> \n> 1.  This is the first list item.\n> 2.  This is the second list item.\n> \n> Here\'s some example code:\n> \n>     return shell_exec("echo $input | $markdown_script");');
    });
    test("lists", function() {
      equal(und.convert("<ul><li>Line one.</li></ul>"), "*   Line one.");
      equal(und.convert("<ul><li>Line one.</li><li>Line two.</li></ul>"), "*   Line one.\n*   Line two.");
      equal(und.convert("<ul><li>Line one.</li><li><p>Line two.</p></li></ul>"), "*   Line one.\n\n*   Line two.");
      equal(und.convert("<ul><li><p>Line one.</p></li><li><p>Line two.</p></li></ul>"), "*   Line one.\n\n*   Line two.");
      equal(und.convert("<ul><li><p>Line one.</p></li><li><p>Line two.</p></li><li><p>Line three.</p></li></ul>"), "*   Line one.\n\n*   Line two.\n\n*   Line three.");
      equal(und.convert("<ol><li>Line one.</li></ol>"), "1.  Line one.");
      equal(und.convert("<ol><li>Line one.</li><li>Line two.</li></ol>"), "1.  Line one.\n2.  Line two.");
      equal(und.convert("<ol><li>Line one.</li><li><p>Line two.</p></li></ol>"), "1.  Line one.\n\n2.  Line two.");
      equal(und.convert("<ol><li><p>Line one.</p></li><li><p>Line two.</p></li></ol>"), "1.  Line one.\n\n2.  Line two.");
      equal(und.convert("<ol><li><p>Line one.</p></li><li><p>Line two.</p></li><li><p>Line three.</p></li></ol>"), "1.  Line one.\n\n2.  Line two.\n\n3.  Line three.");
      equal(und.convert("<ul><li>Line one.<ul><li>Line two.</li></ul></li></ul>"), "*   Line one.\n    *   Line two.");
      equal(und.convert("<ul><li><p>Line one.</p><ul><li>Line two.</li></ul></li></ul>"), "*   Line one.\n\n    *   Line two.");
      equal(und.convert("<ul><li><p>Line one.</p><ul><li>Line two.</li><li>Line three.</li></ul></li></ul>"), "*   Line one.\n\n    *   Line two.\n    *   Line three.");
      equal(und.convert("<ol><li>Line one.<ol><li>Line two.</li></ol></li></ol>"), "1.  Line one.\n    1.  Line two.");
      equal(und.convert("<ol><li><p>Line one.</p><ol><li>Line two.</li></ol></li></ol>"), "1.  Line one.\n\n    1.  Line two.");
      equal(und.convert("<ol><li><p>Line one.</p><ol><li>Line two.</li><li>Line three.</li></ol></li></ol>"), "1.  Line one.\n\n    1.  Line two.\n    2.  Line three.");
      equal(und.convert('<ol>\n    <li><p>This is a list item with two paragraphs. Lorem ipsum dolor\n    sit amet, consectetuer adipiscing elit. Aliquam hendrerit\n    mi posuere lectus.</p>\n\n   <p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet\n    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum\n    sit amet velit.</p></li>\n\n    <li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li>\n</ol>'), '1.  This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.\n\n    Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.\n\n2.  Suspendisse id sem consectetuer libero luctus adipiscing.');
      equal(und.convert('<ul>\n    <li><p>This is a list item with two paragraphs.</p>\n\n    <p>This is the second paragraph in the list item. You\'re\nonly required to indent the first line. Lorem ipsum dolor\nsit amet, consectetuer adipiscing elit.</p></li>\n\n    <li><p>Another item in the same list.</p></li>\n</ul>'), '*   This is a list item with two paragraphs.\n\n    This is the second paragraph in the list item. You\'re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n\n*   Another item in the same list.');
      equal(und.convert('<ul>\n    <li><p>A list item with a blockquote:</p>\n    \n    <blockquote>\n        <p>This is a blockquote\n        inside a list item.</p>\n    </blockquote></li>\n</ul>'), '*   A list item with a blockquote:\n\n    > This is a blockquote inside a list item.');
      equal(und.convert('<ul>\n    <li><p>A list item with a code block:</p>\n\n<pre><code>&lt;code goes here&gt;\n</code></pre></li>\n</ul>'), '*   A list item with a code block:\n\n\n        <code goes here>');
      equal(und.convert('<p>Unordered tight:</p>\n\n<ul>\n<li>asterisk 1</li>\n<li>asterisk 2</li>\n<li>asterisk 3</li>\n</ul>'), 'Unordered tight:\n\n*   asterisk 1\n*   asterisk 2\n*   asterisk 3');
      equal(und.convert('<p>Unordered loose:</p>\n\n<ul>\n<li><p>asterisk 1</p></li>\n<li><p>asterisk 2</p></li>\n<li><p>asterisk 3</p></li>\n</ul>'), 'Unordered loose:\n\n*   asterisk 1\n\n*   asterisk 2\n\n*   asterisk 3');
      equal(und.convert('<p>Ordered tight:</p>\n\n<ol>\n<li>First</li>\n<li>Second</li>\n<li>Third</li>\n</ol>'), 'Ordered tight:\n\n1.  First\n2.  Second\n3.  Third');
      equal(und.convert('<p>Ordered loose:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second</p></li>\n<li><p>Third</p></li>\n</ol>'), 'Ordered loose:\n\n1.  First\n\n2.  Second\n\n3.  Third');
      equal(und.convert('<p>Multiple paragraphs:</p>\n\n<ol>\n<li><p>Item 1, graf one.</p>\n\n<p>Item 2. graf two. The quick brown fox jumped over the lazy dog\'s\nback.</p></li>\n<li><p>Item 2.</p></li>\n<li><p>Item 3.</p></li>\n</ol>'), 'Multiple paragraphs:\n\n1.  Item 1, graf one.\n\n    Item 2. graf two. The quick brown fox jumped over the lazy dog\'s back.\n\n2.  Item 2.\n\n3.  Item 3.');
      equal(und.convert('<h2>Nested</h2>\n\n<ul>\n<li>Tab\n<ul>\n<li>Tab\n<ul>\n<li>Tab</li>\n</ul></li>\n</ul></li>\n</ul>'), '## Nested\n\n*   Tab \n    *   Tab \n        *   Tab');
      equal(und.convert('<p>Another nested:</p>\n\n<ol>\n<li>First</li>\n<li>Second:\n<ul>\n<li>Fee</li>\n<li>Fie</li>\n<li>Foe</li>\n</ul></li>\n<li>Third</li>\n</ol>'), 'Another nested:\n\n1.  First\n2.  Second: \n    *   Fee\n    *   Fie\n    *   Foe\n3.  Third');
      return equal(und.convert('<p>Same thing but with paragraphs:</p>\n\n<ol>\n<li><p>First</p></li>\n<li><p>Second:</p>\n\n<ul>\n<li>Fee</li>\n<li>Fie</li>\n<li>Foe</li>\n</ul></li>\n<li><p>Third</p></li>\n</ol>'), 'Same thing but with paragraphs:\n\n1.  First\n\n2.  Second:\n\n    *   Fee\n    *   Fie\n    *   Foe\n\n3.  Third');
    });
    test("links", function() {
      equal(und.convert('<p>This is <a href="http://netgusto.com/" title="Title">Net Gusto</a> inline link.</p>'), 'This is [Net Gusto](http://netgusto.com/ "Title") inline link.');
      equal(und.convert('<p><a href="http://netgusto.com/">This link</a> has no title attribute.</p>'), '[This link](http://netgusto.com/) has no title attribute.');
      equal(und.convert('<p>See my <a href="/about/">About</a> page for details.</p>'), 'See my [About](/about/) page for details.');
      equal(und.convert('<p>This is an autolink: <a href="http://netgusto.com">http://netgusto.com</a>.</p>'), 'This is an autolink: <http://netgusto.com>.');
      return equal(und.convert('<p>Mail links <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;n&#105;&#x6b;&#108;&#x61;&#115;&#x40;&#102;&#x72;y&#107;&#x68;&#111;&#x6c;&#109;&#x2e;&#115;&#x65;">&#x6e;&#105;&#x6b;&#108;&#x61;&#115;&#x40;f&#114;&#x79;&#107;&#x68;&#111;&#x6c;&#109;&#x2e;s&#101;</a> and <a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#x3a;n&#105;&#x6b;&#108;&#x61;&#115;&#x40;&#102;&#x72;y&#107;&#x68;&#111;&#x6c;&#109;&#x2e;&#115;&#x65;">&#x6e;&#105;&#x6b;&#108;&#x61;&#115;&#x40;f&#114;&#x79;&#107;&#x68;&#111;&#x6c;&#109;&#x2e;s&#101;</a>.</p>'), 'Mail links <niklas@frykholm.se> and <niklas@frykholm.se>.');
    });
    test("emphasis", function() {
      equal(und.convert('<p>This is <a href="http://netgusto.com/" title="Title">Net Gusto</a> inline link.</p>'), 'This is [Net Gusto](http://netgusto.com/ "Title") inline link.');
      equal(und.convert('<p>Test <em>single asterisks</em> test.</p>'), 'Test *single asterisks* test.');
      equal(und.convert('<p>Test <strong>double asterisks</strong> test.</p>'), 'Test **double asterisks** test.');
      equal(und.convert('<p>net<em>gust</em>o</p>'), 'net*gust*o');
      equal(und.convert('<p>*this text is surrounded by literal asterisks*</p>'), '\*this text is surrounded by literal asterisks\*');
      return equal(und.convert('<p>Test with <em>two</em> different <em>words</em>.</p>'), 'Test with *two* different *words*.');
    });
    test("images", function() {
      equal(und.convert('<p><img src="/path/to/img.jpg" alt="Alt text"/></p>'), '![Alt text](/path/to/img.jpg)');
      return equal(und.convert('<p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"/></p>'), '![Alt text](/path/to/img.jpg "Optional title")');
    });
    test("escapes", function() {
      equal(und.convert('<p>*literal asterisks*</p>'), '\*literal asterisks\*');
      return equal(und.convert('<p>*literal asterisks*</p>'), '\*literal asterisks\*');
    });
    test("linebreaks", function() {
      return equal(und.convert('<p>Poetry<br/>in<br/>motion</p>'), 'Poetry  \nin  \nmotion');
    });
    test("amps", function() {
      equal(und.convert('<p>&copy;</p>'), '©');
      equal(und.convert('<p>AT&amp;T</p>'), 'AT&T');
      return equal(und.convert('<p>4 &lt; 5</p>'), '4 < 5');
    });
    test("markdown_nested_blockquotes", function() {
      return equal(und.convert('<blockquote>\n  <p>foo</p>\n  \n  <blockquote>\n    <p>bar</p>\n  </blockquote>\n  \n  <p>foo</p>\n</blockquote>'), '> foo\n> \n> > bar\n> \n> foo');
    });
    test("markdown_documentation_amps_and_angles", function() {
      return equal(und.convert('<p>AT&T has an ampersand in their name.</p>\n\n<p>AT&amp;T is another way to write it.</p>\n\n<p>This &amp; that.</p>\n\n<p>4 &lt; 5.</p>\n\n<p>6 > 5.</p>\n\n<p>Here\'s a <a href="http://example.com/?foo=1&amp;bar=2">link</a> with an ampersand in the URL.</p>\n\n<p>Here\'s a link with an ampersand in the link text: <a href="http://att.com/" title="AT&amp;T">AT&amp;T</a>.</p>\n\n<p>Here\'s an inline <a href="/script?foo=1&amp;bar=2">link</a>.</p>'), 'AT&T has an ampersand in their name.\n\nAT&T is another way to write it.\n\nThis & that.\n\n4 < 5.\n\n6 > 5.\n\nHere\'s a [link](http://example.com/?foo=1&bar=2) with an ampersand in the URL.\n\nHere\'s a link with an ampersand in the link text: [AT&T](http://att.com/ "AT&T").\n\nHere\'s an inline [link](/script?foo=1&bar=2).');
    });
    test("markdown_documentation_auto_links", function() {
      return equal(und.convert('<p>Link: <a href="http://example.com/">http://example.com/</a>.</p>\n\n<p>With an ampersand: <a href="http://example.com/?foo=1&bar=2">http://example.com/?foo=1&amp;bar=2</a></p>\n\n<ul>\n<li>In a list?</li>\n<li><a href="http://example.com/">http://example.com/</a></li>\n<li>It should.</li>\n</ul>\n\n<blockquote>\n  <p>Blockquoted: <a href="http://example.com/">http://example.com/</a></p>\n</blockquote>\n\n<p>Auto-links should not occur here: <code>&lt;http://example.com/&gt;</code></p>\n\n<pre><code>or here: &lt;http://example.com/&gt;\n</code></pre>'), 'Link: <http://example.com/>.\n\nWith an ampersand: <http://example.com/?foo=1&bar=2>\n\n*   In a list?\n*   <http://example.com/>\n*   It should.\n\n> Blockquoted: <http://example.com/>\n\nAuto-links should not occur here: `<http://example.com/>`\n\n    or here: <http://example.com/>');
    });
    test("markdown_documentation_blockquotes_with_codeblocks", function() {
      return equal(und.convert('<blockquote>\n  <p>Example:</p>\n\n<pre><code>sub status {\n    print "working";\n}</code></pre>\n  \n  <p>Or:</p>\n\n<pre><code>sub status {\n    return "working";\n}</code></pre>\n</blockquote>'), '> Example:\n> \n>     sub status {\n>         print "working";\n>     }\n> \n> Or:\n> \n>     sub status {\n>         return "working";\n>     }');
    });
    test("markdown_documentation_literal_quotes_in_text", function() {
      equal(und.convert('<p>Foo <a href="/url/" title="Title with &quot;quotes&quot; inside">bar</a>.</p>'), 'Foo [bar](/url/ "Title with "quotes" inside").');
      equal(und.convert('<p>Hello, "World" !</p>'), 'Hello, "World" !');
      return equal(und.convert('<p>Hello, &quot;World&quot; !</p>'), 'Hello, "World" !');
    });
    return test("markdown_documentation_basics", function() {
      return equal(und.convert('<h1>Markdown: Basics</h1>\n\n<h2>Getting the Gist of Markdown\'s Formatting Syntax</h2>\n\n<p>This page offers a brief overview of what it\'s like to use Markdown.\nThe <a href="/projects/markdown/syntax" title="Markdown Syntax">syntax page</a> provides complete, detailed documentation for\nevery feature, but Markdown should be very easy to pick up simply by\nlooking at a few examples of it in action. The examples on this page\nare written in a before/after style, showing example syntax and the\nHTML output produced by Markdown.</p>\n\n<p>It\'s also helpful to simply try Markdown out; the <a href="/projects/markdown/dingus" title="Markdown Dingus">Dingus</a> is a\nweb application that allows you type your own Markdown-formatted text\nand translate it to XHTML.</p>\n\n<p><strong>Note:</strong> This document is itself written using Markdown; you\ncan <a href="/projects/markdown/basics.text">see the source for it by adding \'.text\' to the URL</a>.</p>\n\n<h2>Paragraphs, Headers, Blockquotes</h2>\n\n<p>A paragraph is simply one or more consecutive lines of text, separated\nby one or more blank lines. (A blank line is any line that looks like a\nblank line -- a line containing nothing spaces or tabs is considered\nblank.) Normal paragraphs should not be intended with spaces or tabs.</p>\n\n<p>Markdown offers two styles of headers: <em>Setext</em> and <em>atx</em>.\nSetext-style headers for <code>&lt;h1&gt;</code> and <code>&lt;h2&gt;</code> are created by\n"underlining" with equal signs (<code>=</code>) and hyphens (<code>-</code>), respectively.\nTo create an atx-style header, you put 1-6 hash marks (<code>#</code>) at the\nbeginning of the line -- the number of hashes equals the resulting\nHTML header level.</p>\n\n<p>Blockquotes are indicated using email-style \'<code>&gt;</code>\' angle brackets.</p>\n\n<p>Markdown:</p>\n\n<pre><code>A First Level Header\n====================\n\nA Second Level Header\n---------------------\n\nNow is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.\n\nThe quick brown fox jumped over the lazy\ndog\'s back.\n\n### Header 3\n\n&gt; This is a blockquote.\n&gt; \n&gt; This is the second paragraph in the blockquote.\n&gt;\n&gt; ## This is an H2 in a blockquote</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;h1&gt;A First Level Header&lt;/h1&gt;\n\n&lt;h2&gt;A Second Level Header&lt;/h2&gt;\n\n&lt;p&gt;Now is the time for all good men to come to\nthe aid of their country. This is just a\nregular paragraph.&lt;/p&gt;\n\n&lt;p&gt;The quick brown fox jumped over the lazy\ndog\'s back.&lt;/p&gt;\n\n&lt;h3&gt;Header 3&lt;/h3&gt;\n\n&lt;blockquote&gt;\n    &lt;p&gt;This is a blockquote.&lt;/p&gt;\n\n    &lt;p&gt;This is the second paragraph in the blockquote.&lt;/p&gt;\n\n    &lt;h2&gt;This is an H2 in a blockquote&lt;/h2&gt;\n&lt;/blockquote&gt;</code></pre>\n\n<h3>Phrase Emphasis</h3>\n\n<p>Markdown uses asterisks and underscores to indicate spans of emphasis.</p>\n\n<p>Markdown:</p>\n\n<pre><code>Some of these words *are emphasized*.\nSome of these words _are emphasized also_.\n\nUse two asterisks for **strong emphasis**.\nOr, if you prefer, __use two underscores instead__.</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;Some of these words &lt;em&gt;are emphasized&lt;/em&gt;.\nSome of these words &lt;em&gt;are emphasized also&lt;/em&gt;.&lt;/p&gt;\n\n&lt;p&gt;Use two asterisks for &lt;strong&gt;strong emphasis&lt;/strong&gt;.\nOr, if you prefer, &lt;strong&gt;use two underscores instead&lt;/strong&gt;.&lt;/p&gt;</code></pre>\n\n<h2>Lists</h2>\n\n<p>Unordered (bulleted) lists use asterisks, pluses, and hyphens (<code>*</code>,\n<code>+</code>, and <code>-</code>) as list markers. These three markers are\ninterchangable; this:</p>\n\n<pre><code>*   Candy.\n*   Gum.\n*   Booze.</code></pre>\n\n<p>this:</p>\n\n<pre><code>+   Candy.\n+   Gum.\n+   Booze.</code></pre>\n\n<p>and this:</p>\n\n<pre><code>-   Candy.\n-   Gum.\n-   Booze.</code></pre>\n\n<p>all produce the same output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;Candy.&lt;/li&gt;\n&lt;li&gt;Gum.&lt;/li&gt;\n&lt;li&gt;Booze.&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<p>Ordered (numbered) lists use regular numbers, followed by periods, as\nlist markers:</p>\n\n<pre><code>1.  Red\n2.  Green\n3.  Blue</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ol&gt;\n&lt;li&gt;Red&lt;/li&gt;\n&lt;li&gt;Green&lt;/li&gt;\n&lt;li&gt;Blue&lt;/li&gt;\n&lt;/ol&gt;</code></pre>\n\n<p>If you put blank lines between items, you\'ll get <code>&lt;p&gt;</code> tags for the\nlist item text. You can create multi-paragraph list items by indenting\nthe paragraphs by 4 spaces or 1 tab:</p>\n\n<pre><code>*   A list item.\n\n    With multiple paragraphs.\n\n*   Another item in the list.</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;A list item.&lt;/p&gt;\n&lt;p&gt;With multiple paragraphs.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Another item in the list.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;</code></pre>\n\n<h3>Links</h3>\n\n<p>Markdown supports two styles for creating links: <em>inline</em> and\n<em>reference</em>. With both styles, you use square brackets to delimit the\ntext you want to turn into a link.</p>\n\n<p>Inline-style links use parentheses immediately after the link text.\nFor example:</p>\n\n<pre><code>This is an [example link](http://example.com/).</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;</code></pre>\n\n<p>Optionally, you may include a title attribute in the parentheses:</p>\n\n<pre><code>This is an [example link](http://example.com/ "With a Title").</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;This is an &lt;a href="http://example.com/" title="With a Title"&gt;\nexample link&lt;/a&gt;.&lt;/p&gt;</code></pre>\n\n<p>Reference-style links allow you to refer to your links by names, which\nyou define elsewhere in your document:</p>\n\n<pre><code>I get 10 times more traffic from [Google][1] than from\n[Yahoo][2] or [MSN][3].\n\n[1]: http://google.com/        "Google"\n[2]: http://search.yahoo.com/  "Yahoo Search"\n[3]: http://search.msn.com/    "MSN Search"</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href="http://google.com/"\ntitle="Google"&gt;Google&lt;/a&gt; than from &lt;a href="http://search.yahoo.com/"\ntitle="Yahoo Search"&gt;Yahoo&lt;/a&gt; or &lt;a href="http://search.msn.com/"\ntitle="MSN Search"&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre>\n\n<p>The title attribute is optional. Link names may contain letters,\nnumbers and spaces, but are <em>not</em> case sensitive:</p>\n\n<pre><code>I start my morning with a cup of coffee and\n[The New York Times][NY Times].\n\n[ny times]: http://www.nytimes.com/</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I start my morning with a cup of coffee and\n&lt;a href="http://www.nytimes.com/"&gt;The New York Times&lt;/a&gt;.&lt;/p&gt;</code></pre>\n\n<h3>Images</h3>\n\n<p>Image syntax is very much like link syntax.</p>\n\n<p>Inline (titles are optional):</p>\n\n<pre><code>![alt text](/path/to/img.jpg "Title")</code></pre>\n\n<p>Reference-style:</p>\n\n<pre><code>![alt text][id]\n\n[id]: /path/to/img.jpg "Title"</code></pre>\n\n<p>Both of the above examples produce the same output:</p>\n\n<pre><code>&lt;img src="/path/to/img.jpg" alt="alt text" title="Title" /&gt;</code></pre>\n\n<h3>Code</h3>\n\n<p>In a regular paragraph, you can create code span by wrapping text in\nbacktick quotes. Any ampersands (<code>&amp;</code>) and angle brackets (<code>&lt;</code> or\n<code>&gt;</code>) will automatically be translated into HTML entities. This makes\nit easy to use Markdown to write about HTML example code:</p>\n\n<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.\n\nI wish SmartyPants used named entities like `&amp;mdash;`\ninstead of decimal-encoded entites like `&amp;#8212;`.</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;I strongly recommend against using any\n&lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;\n\n&lt;p&gt;I wish SmartyPants used named entities like\n&lt;code&gt;&amp;amp;mdash;&lt;/code&gt; instead of decimal-encoded\nentites like &lt;code&gt;&amp;amp;#8212;&lt;/code&gt;.&lt;/p&gt;</code></pre>\n\n<p>To specify an entire block of pre-formatted code, indent every line of\nthe block by 4 spaces or 1 tab. Just like with code spans, <code>&amp;</code>, <code>&lt;</code>,\nand <code>&gt;</code> characters will be escaped automatically.</p>\n\n<p>Markdown:</p>\n\n<pre><code>If you want your page to validate under XHTML 1.0 Strict,\nyou\'ve got to put paragraph tags in your blockquotes:\n\n    &lt;blockquote&gt;\n        &lt;p&gt;For example.&lt;/p&gt;\n    &lt;/blockquote&gt;</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;p&gt;If you want your page to validate under XHTML 1.0 Strict,\nyou\'ve got to put paragraph tags in your blockquotes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;\n    &amp;lt;p&amp;gt;For example.&amp;lt;/p&amp;gt;\n&amp;lt;/blockquote&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;</code></pre>'), '.# Markdown: Basics\n.\n.## Getting the Gist of Markdown\'s Formatting Syntax\n.\n.This page offers a brief overview of what it\'s like to use Markdown. The [syntax page](/projects/markdown/syntax "Markdown Syntax") provides complete, detailed documentation for every feature, but Markdown should be very easy to pick up simply by looking at a few examples of it in action. The examples on this page are written in a before/after style, showing example syntax and the HTML output produced by Markdown.\n.\n.It\'s also helpful to simply try Markdown out; the [Dingus](/projects/markdown/dingus "Markdown Dingus") is a web application that allows you type your own Markdown-formatted text and translate it to XHTML.\n.\n.**Note:** This document is itself written using Markdown; you can [see the source for it by adding \'.text\' to the URL](/projects/markdown/basics.text).\n.\n.## Paragraphs, Headers, Blockquotes\n.\n.A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing spaces or tabs is considered blank.) Normal paragraphs should not be intended with spaces or tabs.\n.\n.Markdown offers two styles of headers: *Setext* and *atx*. Setext-style headers for `<h1>` and `<h2>` are created by "underlining" with equal signs (`=`) and hyphens (`-`), respectively. To create an atx-style header, you put 1-6 hash marks (`#`) at the beginning of the line -- the number of hashes equals the resulting HTML header level.\n.\n.Blockquotes are indicated using email-style \'`>`\' angle brackets.\n.\n.Markdown:\n.\n.    A First Level Header\n.    ====================\n.\n.    A Second Level Header\n.    ---------------------\n.\n.    Now is the time for all good men to come to\n.    the aid of their country. This is just a\n.    regular paragraph.\n.\n.    The quick brown fox jumped over the lazy\n.    dog\'s back.\n.\n.    ### Header 3\n.\n.    > This is a blockquote.\n.    > \n.    > This is the second paragraph in the blockquote.\n.    >\n.    > ## This is an H2 in a blockquote\n.\n.Output:\n.\n.    <h1>A First Level Header</h1>\n.\n.    <h2>A Second Level Header</h2>\n.\n.    <p>Now is the time for all good men to come to\n.    the aid of their country. This is just a\n.    regular paragraph.</p>\n.\n.    <p>The quick brown fox jumped over the lazy\n.    dog\'s back.</p>\n.\n.    <h3>Header 3</h3>\n.\n.    <blockquote>\n.        <p>This is a blockquote.</p>\n.\n.        <p>This is the second paragraph in the blockquote.</p>\n.\n.        <h2>This is an H2 in a blockquote</h2>\n.    </blockquote>\n.\n.### Phrase Emphasis\n.\n.Markdown uses asterisks and underscores to indicate spans of emphasis.\n.\n.Markdown:\n.\n.    Some of these words *are emphasized*.\n.    Some of these words _are emphasized also_.\n.\n.    Use two asterisks for **strong emphasis**.\n.    Or, if you prefer, __use two underscores instead__.\n.\n.Output:\n.\n.    <p>Some of these words <em>are emphasized</em>.\n.    Some of these words <em>are emphasized also</em>.</p>\n.\n.    <p>Use two asterisks for <strong>strong emphasis</strong>.\n.    Or, if you prefer, <strong>use two underscores instead</strong>.</p>\n.\n.## Lists\n.\n.Unordered (bulleted) lists use asterisks, pluses, and hyphens (`*`, `+`, and `-`) as list markers. These three markers are interchangable; this:\n.\n.    *   Candy.\n.    *   Gum.\n.    *   Booze.\n.\n.this:\n.\n.    +   Candy.\n.    +   Gum.\n.    +   Booze.\n.\n.and this:\n.\n.    -   Candy.\n.    -   Gum.\n.    -   Booze.\n.\n.all produce the same output:\n.\n.    <ul>\n.    <li>Candy.</li>\n.    <li>Gum.</li>\n.    <li>Booze.</li>\n.    </ul>\n.\n.Ordered (numbered) lists use regular numbers, followed by periods, as list markers:\n.\n.    1.  Red\n.    2.  Green\n.    3.  Blue\n.\n.Output:\n.\n.    <ol>\n.    <li>Red</li>\n.    <li>Green</li>\n.    <li>Blue</li>\n.    </ol>\n.\n.If you put blank lines between items, you\'ll get `<p>` tags for the list item text. You can create multi-paragraph list items by indenting the paragraphs by 4 spaces or 1 tab:\n.\n.    *   A list item.\n.\n.        With multiple paragraphs.\n.\n.    *   Another item in the list.\n.\n.Output:\n.\n.    <ul>\n.    <li><p>A list item.</p>\n.    <p>With multiple paragraphs.</p></li>\n.    <li><p>Another item in the list.</p></li>\n.    </ul>\n.\n.### Links\n.\n.Markdown supports two styles for creating links: *inline* and *reference*. With both styles, you use square brackets to delimit the text you want to turn into a link.\n.\n.Inline-style links use parentheses immediately after the link text. For example:\n\n.    This is an [example link](http://example.com/).\n.\n.Output:\n.\n.    <p>This is an <a href="http://example.com/">\n.    example link</a>.</p>\n.\n.Optionally, you may include a title attribute in the parentheses:\n.\n.    This is an [example link](http://example.com/ "With a Title").\n.\n.Output:\n.\n.    <p>This is an <a href="http://example.com/" title="With a Title">\n.    example link</a>.</p>\n.\n.Reference-style links allow you to refer to your links by names, which you define elsewhere in your document:\n.\n.    I get 10 times more traffic from [Google][1] than from\n.    [Yahoo][2] or [MSN][3].\n.\n.    [1]: http://google.com/        "Google"\n.    [2]: http://search.yahoo.com/  "Yahoo Search"\n.    [3]: http://search.msn.com/    "MSN Search"\n.\n.Output:\n.\n.    <p>I get 10 times more traffic from <a href="http://google.com/"\n.    title="Google">Google</a> than from <a href="http://search.yahoo.com/"\n.    title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/"\n.    title="MSN Search">MSN</a>.</p>\n.\n.The title attribute is optional. Link names may contain letters, numbers and spaces, but are *not* case sensitive:\n.\n.    I start my morning with a cup of coffee and\n.    [The New York Times][NY Times].\n.\n.    [ny times]: http://www.nytimes.com/\n.\n.Output:\n.\n.    <p>I start my morning with a cup of coffee and\n.    <a href="http://www.nytimes.com/">The New York Times</a>.</p>\n.\n.### Images\n.\n.Image syntax is very much like link syntax.\n.\n.Inline (titles are optional):\n.\n.    ![alt text](/path/to/img.jpg "Title")\n.\n.Reference-style:\n.\n.    ![alt text][id]\n.\n.    [id]: /path/to/img.jpg "Title"\n.\n.Both of the above examples produce the same output:\n.\n.    <img src="/path/to/img.jpg" alt="alt text" title="Title" />\n.\n.### Code\n.\n.In a regular paragraph, you can create code span by wrapping text in backtick quotes. Any ampersands (`&`) and angle brackets (`<` or `>`) will automatically be translated into HTML entities. This makes it easy to use Markdown to write about HTML example code:\n.\n.    I strongly recommend against using any `<blink>` tags.\n.\n.    I wish SmartyPants used named entities like `&mdash;`\n.    instead of decimal-encoded entites like `&#8212;`.\n.\n.Output:\n.\n.    <p>I strongly recommend against using any\n.    <code>&lt;blink&gt;</code> tags.</p>\n.\n.    <p>I wish SmartyPants used named entities like\n.    <code>&amp;mdash;</code> instead of decimal-encoded\n.    entites like <code>&amp;#8212;</code>.</p>\n.\n.To specify an entire block of pre-formatted code, indent every line of the block by 4 spaces or 1 tab. Just like with code spans, `&`, `<`, and `>` characters will be escaped automatically.\n.\n.Markdown:\n.\n.    If you want your page to validate under XHTML 1.0 Strict,\n.    you\'ve got to put paragraph tags in your blockquotes:\n.\n.        <blockquote>\n.            <p>For example.</p>\n.        </blockquote>\n.\n.Output:\n.\n.    <p>If you want your page to validate under XHTML 1.0 Strict,\n.    you\'ve got to put paragraph tags in your blockquotes:</p>\n.\n.    <pre><code>&lt;blockquote&gt;\n.        &lt;p&gt;For example.&lt;/p&gt;\n.    &lt;/blockquote&gt;\n.    </code></pre>'.replace(/^\./gm, ''));
    });

    /*
    test "raw", () ->
    
        equal und.convert('''
        <div>
            This should not be disturbed by Markdown.
        </div>
        '''), '''
        <div>
            This should not be disturbed by Markdown.
        </div>
        '''
     */
  });

}).call(this);
