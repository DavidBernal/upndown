// Generated by CoffeeScript 1.7.1
(function() {
  var Comment, Doctype, DocumentNode, GenericNode, Tag, Text,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GenericNode = (function() {
    GenericNode.prototype.name = null;

    GenericNode.prototype.parent = null;

    GenericNode.prototype.previousSibling = null;

    GenericNode.prototype.nextSibling = null;

    GenericNode.prototype.firstChild = null;

    GenericNode.prototype.lastChild = null;

    GenericNode.prototype.data = null;

    GenericNode.prototype.attributes = null;

    GenericNode.prototype.childNodes = null;

    function GenericNode(params) {
      this.toString = __bind(this.toString, this);
      this.isDocumentNode = __bind(this.isDocumentNode, this);
      this.isCommentNode = __bind(this.isCommentNode, this);
      this.isTextNode = __bind(this.isTextNode, this);
      this.getAttributes = __bind(this.getAttributes, this);
      this.getNextSibling = __bind(this.getNextSibling, this);
      this.setNextSibling = __bind(this.setNextSibling, this);
      this.getPreviousSibling = __bind(this.getPreviousSibling, this);
      this.setPreviousSibling = __bind(this.setPreviousSibling, this);
      this.setParent = __bind(this.setParent, this);
      this.getParent = __bind(this.getParent, this);
      this.hasParent = __bind(this.hasParent, this);
      this.getChildNodes = __bind(this.getChildNodes, this);
      this.hasChilds = __bind(this.hasChilds, this);
      this.isFirstChild = __bind(this.isFirstChild, this);
      var child, _i, _len, _ref;
      this.name = params.name;
      this.data = params.data || null;
      this.attributes = params.attributes || {};
      this.childNodes = params.childNodes || [];
      if (this.childNodes.length) {
        this.firstChild = this.childNodes[0];
        this.lastChild = this.childNodes[this.childNodes.length - 1];
        _ref = this.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          child.setParent(this);
        }
      }
    }

    GenericNode.prototype.isFirstChild = function() {
      return this.childNodes.length > 0;
    };

    GenericNode.prototype.hasChilds = function() {
      return this.childNodes.length > 0;
    };

    GenericNode.prototype.getChildNodes = function() {
      return this.childNodes;
    };

    GenericNode.prototype.hasParent = function(parent) {
      return this.parent !== null;
    };

    GenericNode.prototype.getParent = function() {
      return this.parent;
    };

    GenericNode.prototype.setParent = function(parent) {
      var prevsibling, sibling, _i, _len, _ref;
      this.parent = parent;
      if (this.parent !== null) {
        prevsibling = null;
        _ref = this.parent.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sibling = _ref[_i];
          if (prevsibling !== null) {
            prevsibling.setNextSibling(sibling);
          }
          sibling.setPreviousSibling(prevsibling);
          prevsibling = sibling;
        }
      }
      return this;
    };

    GenericNode.prototype.setPreviousSibling = function(previousSibling) {
      this.previousSibling = previousSibling;
      return this;
    };

    GenericNode.prototype.getPreviousSibling = function() {
      return this.previousSibling;
    };

    GenericNode.prototype.setNextSibling = function(nextSibling) {
      this.nextSibling = nextSibling;
      return this;
    };

    GenericNode.prototype.getNextSibling = function() {
      return this.nextSibling;
    };

    GenericNode.prototype.getAttributes = function() {
      return this.attributes;
    };

    GenericNode.prototype.isTextNode = function() {
      return false;
    };

    GenericNode.prototype.isCommentNode = function() {
      return false;
    };

    GenericNode.prototype.isDocumentNode = function() {
      return false;
    };

    GenericNode.prototype.toString = function() {
      var attribute, attributes, child, line, _i, _j, _len, _len1, _ref;
      line = '<' + this.name;
      attributes = this.getAttributes();
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        attribute = attributes[_i];
        line += ' ' + attribute.name;
        if (attribute.value !== null) {
          line += '="' + attribute.value + '"';
        }
      }
      line += '>';
      if (this.data !== null) {
        line += this.data;
      }
      _ref = this.getChildNodes();
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        child = _ref[_j];
        line += child.toString();
      }
      line += '</' + this.name + '>';
      return line;
    };

    return GenericNode;

  })();

  Doctype = (function(_super) {
    __extends(Doctype, _super);

    function Doctype(params) {
      Doctype.__super__.constructor.call(this, params);
      this.name = 'doctype';
    }

    Doctype.prototype.toString = function() {
      return '<!doctype' + this.data + '>';
    };

    return Doctype;

  })(GenericNode);

  Comment = (function(_super) {
    __extends(Comment, _super);

    function Comment(params) {
      Comment.__super__.constructor.call(this, params);
      this.name = '_comment';
    }

    Comment.prototype.toString = function() {
      return '<!--' + this.data + '-->';
    };

    return Comment;

  })(GenericNode);

  Text = (function(_super) {
    __extends(Text, _super);

    function Text(params) {
      this.toString = __bind(this.toString, this);
      this.isTextNode = __bind(this.isTextNode, this);
      this.name = '_text';
      this.data = params.data;
    }

    Text.prototype.isTextNode = function() {
      return true;
    };

    Text.prototype.toString = function() {
      return this.data;
    };

    return Text;

  })(GenericNode);

  Tag = (function(_super) {
    __extends(Tag, _super);

    function Tag() {
      return Tag.__super__.constructor.apply(this, arguments);
    }

    return Tag;

  })(GenericNode);

  DocumentNode = (function(_super) {
    __extends(DocumentNode, _super);

    function DocumentNode(params) {
      this.isDocumentNode = __bind(this.isDocumentNode, this);
      DocumentNode.__super__.constructor.call(this, params);
      this.name = '_document';
    }

    DocumentNode.prototype.isDocumentNode = function() {
      return true;
    };

    DocumentNode.prototype.toString = function() {
      var child, line, _i, _len, _ref;
      line = '';
      _ref = this.getChildNodes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        line += child.toString();
      }
      return line;
    };

    return DocumentNode;

  })(GenericNode);

  module.exports = {
    DocumentNode: DocumentNode,
    Doctype: Doctype,
    Comment: Comment,
    Text: Text,
    Tag: Tag
  };

}).call(this);
